/****************************************************************************
** Gui::KNumInput meta object code from reading C++ file 'knuminput.h'
**
** Created: Sa 13. Mai 12:35:53 2006
**      by: The Qt MOC ($Id: $)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#undef QT_NO_COMPAT
#include "knuminput.h"
#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 26)
#error "This file was generated using the moc from 3.2.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#include <qvariant.h>
const char *Gui::KNumInput::className() const
{
    return "Gui::KNumInput";
}

QMetaObject *Gui::KNumInput::metaObj = 0;
static QMetaObjectCleanUp cleanUp_Gui__KNumInput( "Gui::KNumInput", &Gui::KNumInput::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString Gui::KNumInput::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "Gui::KNumInput", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString Gui::KNumInput::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "Gui::KNumInput", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* Gui::KNumInput::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QWidget::staticMetaObject();
#ifndef QT_NO_PROPERTIES
    static const QMetaProperty props_tbl[1] = {
 	{ "QString","label", 0x3000103, &Gui::KNumInput::metaObj, 0, -1 }
    };
#endif // QT_NO_PROPERTIES
    metaObj = QMetaObject::new_metaobject(
	"Gui::KNumInput", parentObject,
	0, 0,
	0, 0,
#ifndef QT_NO_PROPERTIES
	props_tbl, 1,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_Gui__KNumInput.setMetaObject( metaObj );
    return metaObj;
}

void* Gui::KNumInput::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "Gui::KNumInput" ) )
	return this;
    return QWidget::qt_cast( clname );
}

bool Gui::KNumInput::qt_invoke( int _id, QUObject* _o )
{
    return QWidget::qt_invoke(_id,_o);
}

bool Gui::KNumInput::qt_emit( int _id, QUObject* _o )
{
    return QWidget::qt_emit(_id,_o);
}
#ifndef QT_NO_PROPERTIES

bool Gui::KNumInput::qt_property( int id, int f, QVariant* v)
{
    switch ( id - staticMetaObject()->propertyOffset() ) {
    case 0: switch( f ) {
	case 0: setLabel(v->asString()); break;
	case 1: *v = QVariant( this->label() ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    default:
	return QWidget::qt_property( id, f, v );
    }
    return TRUE;
}

bool Gui::KNumInput::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES


const char *Gui::KIntNumInput::className() const
{
    return "Gui::KIntNumInput";
}

QMetaObject *Gui::KIntNumInput::metaObj = 0;
static QMetaObjectCleanUp cleanUp_Gui__KIntNumInput( "Gui::KIntNumInput", &Gui::KIntNumInput::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString Gui::KIntNumInput::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "Gui::KIntNumInput", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString Gui::KIntNumInput::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "Gui::KIntNumInput", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* Gui::KIntNumInput::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = KNumInput::staticMetaObject();
    static const QUParameter param_slot_0[] = {
	{ 0, &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_0 = {"setValue", 1, param_slot_0 };
    static const QUParameter param_slot_1[] = {
	{ 0, &static_QUType_double, 0, QUParameter::In }
    };
    static const QUMethod slot_1 = {"setRelativeValue", 1, param_slot_1 };
    static const QUParameter param_slot_2[] = {
	{ 0, &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_2 = {"setReferencePoint", 1, param_slot_2 };
    static const QUParameter param_slot_3[] = {
	{ "suffix", &static_QUType_QString, 0, QUParameter::In }
    };
    static const QUMethod slot_3 = {"setSuffix", 1, param_slot_3 };
    static const QUParameter param_slot_4[] = {
	{ "prefix", &static_QUType_QString, 0, QUParameter::In }
    };
    static const QUMethod slot_4 = {"setPrefix", 1, param_slot_4 };
    static const QUMethod slot_5 = {"setEditFocus", 0, 0 };
    static const QUParameter param_slot_6[] = {
	{ "mark", &static_QUType_bool, 0, QUParameter::In }
    };
    static const QUMethod slot_6 = {"setEditFocus", 1, param_slot_6 };
    static const QUParameter param_slot_7[] = {
	{ 0, &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_7 = {"spinValueChanged", 1, param_slot_7 };
    static const QUParameter param_slot_8[] = {
	{ 0, &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_8 = {"slotEmitRelativeValueChanged", 1, param_slot_8 };
    static const QMetaData slot_tbl[] = {
	{ "setValue(int)", &slot_0, QMetaData::Public },
	{ "setRelativeValue(double)", &slot_1, QMetaData::Public },
	{ "setReferencePoint(int)", &slot_2, QMetaData::Public },
	{ "setSuffix(const QString&)", &slot_3, QMetaData::Public },
	{ "setPrefix(const QString&)", &slot_4, QMetaData::Public },
	{ "setEditFocus()", &slot_5, QMetaData::Public },
	{ "setEditFocus(bool)", &slot_6, QMetaData::Public },
	{ "spinValueChanged(int)", &slot_7, QMetaData::Private },
	{ "slotEmitRelativeValueChanged(int)", &slot_8, QMetaData::Private }
    };
    static const QUParameter param_signal_0[] = {
	{ 0, &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod signal_0 = {"valueChanged", 1, param_signal_0 };
    static const QUParameter param_signal_1[] = {
	{ 0, &static_QUType_double, 0, QUParameter::In }
    };
    static const QUMethod signal_1 = {"relativeValueChanged", 1, param_signal_1 };
    static const QMetaData signal_tbl[] = {
	{ "valueChanged(int)", &signal_0, QMetaData::Public },
	{ "relativeValueChanged(double)", &signal_1, QMetaData::Public }
    };
#ifndef QT_NO_PROPERTIES
    static const QMetaProperty props_tbl[7] = {
 	{ "int","value", 0x10000103, &Gui::KIntNumInput::metaObj, 0, -1 },
	{ "int","minValue", 0x10000103, &Gui::KIntNumInput::metaObj, 0, -1 },
	{ "int","maxValue", 0x10000103, &Gui::KIntNumInput::metaObj, 0, -1 },
	{ "int","referencePoint", 0x10000103, &Gui::KIntNumInput::metaObj, 0, -1 },
	{ "QString","suffix", 0x3000103, &Gui::KIntNumInput::metaObj, 0, -1 },
	{ "QString","prefix", 0x3000103, &Gui::KIntNumInput::metaObj, 0, -1 },
	{ "QString","specialValueText", 0x3000103, &Gui::KIntNumInput::metaObj, 0, -1 }
    };
#endif // QT_NO_PROPERTIES
    metaObj = QMetaObject::new_metaobject(
	"Gui::KIntNumInput", parentObject,
	slot_tbl, 9,
	signal_tbl, 2,
#ifndef QT_NO_PROPERTIES
	props_tbl, 7,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_Gui__KIntNumInput.setMetaObject( metaObj );
    return metaObj;
}

void* Gui::KIntNumInput::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "Gui::KIntNumInput" ) )
	return this;
    return KNumInput::qt_cast( clname );
}

// SIGNAL valueChanged
void Gui::KIntNumInput::valueChanged( int t0 )
{
    activate_signal( staticMetaObject()->signalOffset() + 0, t0 );
}

// SIGNAL relativeValueChanged
void Gui::KIntNumInput::relativeValueChanged( double t0 )
{
    activate_signal( staticMetaObject()->signalOffset() + 1, t0 );
}

bool Gui::KIntNumInput::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: setValue((int)static_QUType_int.get(_o+1)); break;
    case 1: setRelativeValue((double)static_QUType_double.get(_o+1)); break;
    case 2: setReferencePoint((int)static_QUType_int.get(_o+1)); break;
    case 3: setSuffix((const QString&)static_QUType_QString.get(_o+1)); break;
    case 4: setPrefix((const QString&)static_QUType_QString.get(_o+1)); break;
    case 5: setEditFocus(); break;
    case 6: setEditFocus((bool)static_QUType_bool.get(_o+1)); break;
    case 7: spinValueChanged((int)static_QUType_int.get(_o+1)); break;
    case 8: slotEmitRelativeValueChanged((int)static_QUType_int.get(_o+1)); break;
    default:
	return KNumInput::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool Gui::KIntNumInput::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: valueChanged((int)static_QUType_int.get(_o+1)); break;
    case 1: relativeValueChanged((double)static_QUType_double.get(_o+1)); break;
    default:
	return KNumInput::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool Gui::KIntNumInput::qt_property( int id, int f, QVariant* v)
{
    switch ( id - staticMetaObject()->propertyOffset() ) {
    case 0: switch( f ) {
	case 0: setValue(v->asInt()); break;
	case 1: *v = QVariant( this->value() ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    case 1: switch( f ) {
	case 0: setMinValue(v->asInt()); break;
	case 1: *v = QVariant( this->minValue() ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    case 2: switch( f ) {
	case 0: setMaxValue(v->asInt()); break;
	case 1: *v = QVariant( this->maxValue() ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    case 3: switch( f ) {
	case 0: setReferencePoint(v->asInt()); break;
	case 1: *v = QVariant( this->referencePoint() ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    case 4: switch( f ) {
	case 0: setSuffix(v->asString()); break;
	case 1: *v = QVariant( this->suffix() ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    case 5: switch( f ) {
	case 0: setPrefix(v->asString()); break;
	case 1: *v = QVariant( this->prefix() ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    case 6: switch( f ) {
	case 0: setSpecialValueText(v->asString()); break;
	case 1: *v = QVariant( this->specialValueText() ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    default:
	return KNumInput::qt_property( id, f, v );
    }
    return TRUE;
}

bool Gui::KIntNumInput::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES


const char *Gui::KDoubleNumInput::className() const
{
    return "Gui::KDoubleNumInput";
}

QMetaObject *Gui::KDoubleNumInput::metaObj = 0;
static QMetaObjectCleanUp cleanUp_Gui__KDoubleNumInput( "Gui::KDoubleNumInput", &Gui::KDoubleNumInput::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString Gui::KDoubleNumInput::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "Gui::KDoubleNumInput", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString Gui::KDoubleNumInput::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "Gui::KDoubleNumInput", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* Gui::KDoubleNumInput::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = KNumInput::staticMetaObject();
    static const QUParameter param_slot_0[] = {
	{ 0, &static_QUType_double, 0, QUParameter::In }
    };
    static const QUMethod slot_0 = {"setValue", 1, param_slot_0 };
    static const QUParameter param_slot_1[] = {
	{ 0, &static_QUType_double, 0, QUParameter::In }
    };
    static const QUMethod slot_1 = {"setRelativeValue", 1, param_slot_1 };
    static const QUParameter param_slot_2[] = {
	{ "ref", &static_QUType_double, 0, QUParameter::In }
    };
    static const QUMethod slot_2 = {"setReferencePoint", 1, param_slot_2 };
    static const QUParameter param_slot_3[] = {
	{ "suffix", &static_QUType_QString, 0, QUParameter::In }
    };
    static const QUMethod slot_3 = {"setSuffix", 1, param_slot_3 };
    static const QUParameter param_slot_4[] = {
	{ "prefix", &static_QUType_QString, 0, QUParameter::In }
    };
    static const QUMethod slot_4 = {"setPrefix", 1, param_slot_4 };
    static const QUParameter param_slot_5[] = {
	{ 0, &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_5 = {"sliderMoved", 1, param_slot_5 };
    static const QUParameter param_slot_6[] = {
	{ 0, &static_QUType_double, 0, QUParameter::In }
    };
    static const QUMethod slot_6 = {"slotEmitRelativeValueChanged", 1, param_slot_6 };
    static const QMetaData slot_tbl[] = {
	{ "setValue(double)", &slot_0, QMetaData::Public },
	{ "setRelativeValue(double)", &slot_1, QMetaData::Public },
	{ "setReferencePoint(double)", &slot_2, QMetaData::Public },
	{ "setSuffix(const QString&)", &slot_3, QMetaData::Public },
	{ "setPrefix(const QString&)", &slot_4, QMetaData::Public },
	{ "sliderMoved(int)", &slot_5, QMetaData::Private },
	{ "slotEmitRelativeValueChanged(double)", &slot_6, QMetaData::Private }
    };
    static const QUParameter param_signal_0[] = {
	{ 0, &static_QUType_double, 0, QUParameter::In }
    };
    static const QUMethod signal_0 = {"valueChanged", 1, param_signal_0 };
    static const QUParameter param_signal_1[] = {
	{ 0, &static_QUType_double, 0, QUParameter::In }
    };
    static const QUMethod signal_1 = {"relativeValueChanged", 1, param_signal_1 };
    static const QMetaData signal_tbl[] = {
	{ "valueChanged(double)", &signal_0, QMetaData::Public },
	{ "relativeValueChanged(double)", &signal_1, QMetaData::Public }
    };
#ifndef QT_NO_PROPERTIES
    static const QMetaProperty props_tbl[6] = {
 	{ "double","value", 0x13000103, &Gui::KDoubleNumInput::metaObj, 0, -1 },
	{ "double","minValue", 0x13000103, &Gui::KDoubleNumInput::metaObj, 0, -1 },
	{ "double","maxValue", 0x13000103, &Gui::KDoubleNumInput::metaObj, 0, -1 },
	{ "QString","suffix", 0x3000103, &Gui::KDoubleNumInput::metaObj, 0, -1 },
	{ "QString","prefix", 0x3000103, &Gui::KDoubleNumInput::metaObj, 0, -1 },
	{ "QString","specialValueText", 0x3000103, &Gui::KDoubleNumInput::metaObj, 0, -1 }
    };
#endif // QT_NO_PROPERTIES
    metaObj = QMetaObject::new_metaobject(
	"Gui::KDoubleNumInput", parentObject,
	slot_tbl, 7,
	signal_tbl, 2,
#ifndef QT_NO_PROPERTIES
	props_tbl, 6,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_Gui__KDoubleNumInput.setMetaObject( metaObj );
    return metaObj;
}

void* Gui::KDoubleNumInput::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "Gui::KDoubleNumInput" ) )
	return this;
    return KNumInput::qt_cast( clname );
}

// SIGNAL valueChanged
void Gui::KDoubleNumInput::valueChanged( double t0 )
{
    activate_signal( staticMetaObject()->signalOffset() + 0, t0 );
}

// SIGNAL relativeValueChanged
void Gui::KDoubleNumInput::relativeValueChanged( double t0 )
{
    activate_signal( staticMetaObject()->signalOffset() + 1, t0 );
}

bool Gui::KDoubleNumInput::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: setValue((double)static_QUType_double.get(_o+1)); break;
    case 1: setRelativeValue((double)static_QUType_double.get(_o+1)); break;
    case 2: setReferencePoint((double)static_QUType_double.get(_o+1)); break;
    case 3: setSuffix((const QString&)static_QUType_QString.get(_o+1)); break;
    case 4: setPrefix((const QString&)static_QUType_QString.get(_o+1)); break;
    case 5: sliderMoved((int)static_QUType_int.get(_o+1)); break;
    case 6: slotEmitRelativeValueChanged((double)static_QUType_double.get(_o+1)); break;
    default:
	return KNumInput::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool Gui::KDoubleNumInput::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: valueChanged((double)static_QUType_double.get(_o+1)); break;
    case 1: relativeValueChanged((double)static_QUType_double.get(_o+1)); break;
    default:
	return KNumInput::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool Gui::KDoubleNumInput::qt_property( int id, int f, QVariant* v)
{
    switch ( id - staticMetaObject()->propertyOffset() ) {
    case 0: switch( f ) {
	case 0: setValue(v->asDouble()); break;
	case 1: *v = QVariant( this->value() ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    case 1: switch( f ) {
	case 0: setMinValue(v->asDouble()); break;
	case 1: *v = QVariant( this->minValue() ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    case 2: switch( f ) {
	case 0: setMaxValue(v->asDouble()); break;
	case 1: *v = QVariant( this->maxValue() ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    case 3: switch( f ) {
	case 0: setSuffix(v->asString()); break;
	case 1: *v = QVariant( this->suffix() ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    case 4: switch( f ) {
	case 0: setPrefix(v->asString()); break;
	case 1: *v = QVariant( this->prefix() ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    case 5: switch( f ) {
	case 0: setSpecialValueText(v->asString()); break;
	case 1: *v = QVariant( this->specialValueText() ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    default:
	return KNumInput::qt_property( id, f, v );
    }
    return TRUE;
}

bool Gui::KDoubleNumInput::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES


const char *Gui::KIntSpinBox::className() const
{
    return "Gui::KIntSpinBox";
}

QMetaObject *Gui::KIntSpinBox::metaObj = 0;
static QMetaObjectCleanUp cleanUp_Gui__KIntSpinBox( "Gui::KIntSpinBox", &Gui::KIntSpinBox::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString Gui::KIntSpinBox::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "Gui::KIntSpinBox", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString Gui::KIntSpinBox::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "Gui::KIntSpinBox", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* Gui::KIntSpinBox::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QSpinBox::staticMetaObject();
#ifndef QT_NO_PROPERTIES
    static const QMetaProperty props_tbl[1] = {
 	{ "int","base", 0x10000103, &Gui::KIntSpinBox::metaObj, 0, -1 }
    };
#endif // QT_NO_PROPERTIES
    metaObj = QMetaObject::new_metaobject(
	"Gui::KIntSpinBox", parentObject,
	0, 0,
	0, 0,
#ifndef QT_NO_PROPERTIES
	props_tbl, 1,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_Gui__KIntSpinBox.setMetaObject( metaObj );
    return metaObj;
}

void* Gui::KIntSpinBox::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "Gui::KIntSpinBox" ) )
	return this;
    return QSpinBox::qt_cast( clname );
}

bool Gui::KIntSpinBox::qt_invoke( int _id, QUObject* _o )
{
    return QSpinBox::qt_invoke(_id,_o);
}

bool Gui::KIntSpinBox::qt_emit( int _id, QUObject* _o )
{
    return QSpinBox::qt_emit(_id,_o);
}
#ifndef QT_NO_PROPERTIES

bool Gui::KIntSpinBox::qt_property( int id, int f, QVariant* v)
{
    switch ( id - staticMetaObject()->propertyOffset() ) {
    case 0: switch( f ) {
	case 0: setBase(v->asInt()); break;
	case 1: *v = QVariant( this->base() ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    default:
	return QSpinBox::qt_property( id, f, v );
    }
    return TRUE;
}

bool Gui::KIntSpinBox::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES


const char *Gui::KDoubleSpinBox::className() const
{
    return "Gui::KDoubleSpinBox";
}

QMetaObject *Gui::KDoubleSpinBox::metaObj = 0;
static QMetaObjectCleanUp cleanUp_Gui__KDoubleSpinBox( "Gui::KDoubleSpinBox", &Gui::KDoubleSpinBox::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString Gui::KDoubleSpinBox::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "Gui::KDoubleSpinBox", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString Gui::KDoubleSpinBox::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "Gui::KDoubleSpinBox", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* Gui::KDoubleSpinBox::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QSpinBox::staticMetaObject();
    static const QUParameter param_slot_0[] = {
	{ "value", &static_QUType_double, 0, QUParameter::In }
    };
    static const QUMethod slot_0 = {"setValue", 1, param_slot_0 };
    static const QUParameter param_slot_1[] = {
	{ "value", &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_1 = {"slotValueChanged", 1, param_slot_1 };
    static const QMetaData slot_tbl[] = {
	{ "setValue(double)", &slot_0, QMetaData::Public },
	{ "slotValueChanged(int)", &slot_1, QMetaData::Protected }
    };
    static const QUParameter param_signal_0[] = {
	{ "value", &static_QUType_double, 0, QUParameter::In }
    };
    static const QUMethod signal_0 = {"valueChanged", 1, param_signal_0 };
    static const QMetaData signal_tbl[] = {
	{ "valueChanged(double)", &signal_0, QMetaData::Public }
    };
#ifndef QT_NO_PROPERTIES
    static const QMetaProperty props_tbl[6] = {
 	{ "bool","acceptLocalizedNumbers", 0x12000103, &Gui::KDoubleSpinBox::metaObj, 0, -1 },
	{ "double","maxValue", 0x1302a303, &Gui::KDoubleSpinBox::metaObj, 0, -1 },
	{ "double","minValue", 0x1302a303, &Gui::KDoubleSpinBox::metaObj, 0, -1 },
	{ "double","lineStep", 0x1302a303, &Gui::KDoubleSpinBox::metaObj, 0, -1 },
	{ "double","value", 0x1302a303, &Gui::KDoubleSpinBox::metaObj, 0, -1 },
	{ "int","precision", 0x10000103, &Gui::KDoubleSpinBox::metaObj, 0, -1 }
    };
#endif // QT_NO_PROPERTIES
    metaObj = QMetaObject::new_metaobject(
	"Gui::KDoubleSpinBox", parentObject,
	slot_tbl, 2,
	signal_tbl, 1,
#ifndef QT_NO_PROPERTIES
	props_tbl, 6,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_Gui__KDoubleSpinBox.setMetaObject( metaObj );
    return metaObj;
}

void* Gui::KDoubleSpinBox::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "Gui::KDoubleSpinBox" ) )
	return this;
    return QSpinBox::qt_cast( clname );
}

// SIGNAL valueChanged
void Gui::KDoubleSpinBox::valueChanged( double t0 )
{
    activate_signal( staticMetaObject()->signalOffset() + 0, t0 );
}

bool Gui::KDoubleSpinBox::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: setValue((double)static_QUType_double.get(_o+1)); break;
    case 1: slotValueChanged((int)static_QUType_int.get(_o+1)); break;
    default:
	return QSpinBox::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool Gui::KDoubleSpinBox::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: valueChanged((double)static_QUType_double.get(_o+1)); break;
    default:
	return QSpinBox::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool Gui::KDoubleSpinBox::qt_property( int id, int f, QVariant* v)
{
    switch ( id - staticMetaObject()->propertyOffset() ) {
    case 0: switch( f ) {
	case 0: setAcceptLocalizedNumbers(v->asBool()); break;
	case 1: *v = QVariant( this->acceptLocalizedNumbers(), 0 ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    case 1: switch( f ) {
	case 0: setMaxValue(v->asDouble()); break;
	case 1: *v = QVariant( this->maxValue() ); break;
	case 3: case 4: case 5: goto resolve;
	default: return FALSE;
    } break;
    case 2: switch( f ) {
	case 0: setMinValue(v->asDouble()); break;
	case 1: *v = QVariant( this->minValue() ); break;
	case 3: case 4: case 5: goto resolve;
	default: return FALSE;
    } break;
    case 3: switch( f ) {
	case 0: setLineStep(v->asDouble()); break;
	case 1: *v = QVariant( this->lineStep() ); break;
	case 3: case 4: case 5: goto resolve;
	default: return FALSE;
    } break;
    case 4: switch( f ) {
	case 0: setValue(v->asDouble()); break;
	case 1: *v = QVariant( this->value() ); break;
	case 3: case 4: case 5: goto resolve;
	default: return FALSE;
    } break;
    case 5: switch( f ) {
	case 0: setPrecision(v->asInt()); break;
	case 1: *v = QVariant( this->precision() ); break;
	case 3: case 4: case 5: break;
	default: return FALSE;
    } break;
    default:
	return QSpinBox::qt_property( id, f, v );
    }
    return TRUE;
resolve:
    return QSpinBox::qt_property( staticMetaObject()->resolveProperty(id), f, v );
}

bool Gui::KDoubleSpinBox::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES
